# Цыганков Павел Владимирович

import math
import random
from math import sqrt
# Easy

# Задача-1:
# Дан список фруктов.
# Напишите программу, выводящую фрукты в виде нумерованного списка,
# выровненного по правой стороне.
# Пример:
# Дано: ["яблоко", "банан", "киви", "арбуз"]
# Вывод:
# 1. яблоко
# 2. банан
# 3. киви
# 4. арбуз
# Подсказка: воспользоваться методом .format()

# Решение
Fruits = ['Яблоко', 'Груша', 'Апельсин', 'Персик', 'Манго', 'Груша', 'Папайя', 'Банан']
numbers = len(Fruits)
for i in range(numbers):
    print(str(i + 1) + '.' + '{:>8}'.format(Fruits[i]))

# Задача-2:
# Даны два произвольные списка.
# Удалите из первого списка элементы, присутствующие во втором списке.
# Решение 
list_1 = [1, 2, 5, 12, 3]
list_2 = [2, 3, 5, 7]
for i in list_2:
    if i in list_1:
        list_1.remove(i)

print('Первая таблица без элементов =',list_1)


# Задача-3:
# Дан произвольный список из целых чисел.
# Получите НОВЫЙ список из элементов исходного, выполнив следующие условия:
# если элемент кратен двум, то разделить его на 4, если не кратен, то умножить на два.
first_list = [2, 7, 5, 6, 9, 15]
new_list = []
last_name = len(first_list)
for i in range(last_name):
    if first_list[i] % 2 == 0:
        new_list.append(first_list[i] / 4)
    else:
        new_list.append(first_list[i] * 2)

print('Новый список после обработки =',new_list)


# Normal

# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4] Результат: [3, 5, 2]
# Решение 
my_list = [2, -5, 8, 9, -25, 25, 4]
new_list = []
for i in my_list:
    if i > 0 and sqrt(i) % 1 == 0:
        new_list.append(int(sqrt(i)))
print('Список после операций =',new_list)

# math.sqrt(element) или sqrt(item) - можно занести в отдельную
# переменную, так как это вычисления, а не переменная, поэтому код будет выполняться дольше.

# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)
# Пусть дана дата 01.01.2000
data = input('Введите дату в формате дд.мм.гггг:')
data_list = data.split('.')
dict_months = {
'01': 'января',
'02': 'феврал',
'03': 'марта',
'04': 'апреля',
'05': 'мая',
'06': 'июня',
'07': 'июля',
'08': 'августа',
'09': 'сентября',
'10': 'октября',
'11': 'ноября',
'12': 'декабря',
}
dict_days = {
'01': 'первое', '02': 'второе', '03': 'третье', '04': 'четвёртое', '05': 'пятое',
'06': 'шестое', '07': 'седьмое', '08': 'восьмое', '09': 'девятое', '10': 'десятое',
'11': 'одиннадцатое', '12': 'двенадцатое', '13': 'тринадцатое', '14': 'четырнадцатое', '15': 'пятнадцатое',
'16': 'шестнадцатое', '17': 'семнадцатое', '18': 'восемнадцатое', '19': 'девятнадцатое', '20': 'двадцатое',
'21': 'двадцать первое', '22': 'двадцать второе', '23': 'двадцать третье', '24': 'двадцать четвёртое',
'25': 'двадцать пятое', '26': 'двадцать шестое', '27': 'двадцать седьмое', '28': 'двадцать восьмое',
'29': 'двадцать девятое', '30': 'тридцатое', '31': 'тридцать первое',
}
for i in dict_days:
    if data_list[0] == i:
        data_list[0] = dict_days[i]

for i in dict_months:
    if data_list[1] == i:
        data_list[1] = dict_months[i]

print_data = data_list[0] + ' ' + data_list[1] + ' ' + data_list[2] + ' ' "года"
print('В текстовом формате дата =', print_data)

# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random
n = int(input('Введите количество элементов в списке: '))
list = []
for el in range(n):
    list.append(random.randint(-100, 100))
print('Полученный список',list)

#hard
# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = '01.11.1985'

# Примеры некорректных дат
date = '01.22.1001'
date = '1.12.1001'
date = '-2.10.3001'

days_in_month = [30, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
date = input('Введите дату:')
day, month, year = date.split('.')

if len(day) == 2 and len(month) == 2 and len(year) == 4:
    if 0 < int(month) <= 12 \
            and 0 < int(year) <= 9999 \
            and 0 < int(day) <= days_in_month[int(month)]:
        print('Дата корректна')
    else:
        print('Дата некорректна')
else:
    print('Дата некоректна')

# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
# ...
# 12 13 14
# 9 10 11
# 6 7 8
# 4 5
# 2 3
# 1
# Эту башню решили оборудовать лифтом —- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
# Выходные данные: Два целых числа — номер этажа и порядковый номер слева на этаже.
# Пример:
# Вход: 13
# Выход: 6 2
# Вход: 11
# Выход: 5 3

room = int(input('Введите номер комнаты: '))
rooms_on_levels = 1
level = 1
last_room_on_level = 1

while room > last_room_on_level:
    level = level + rooms_on_levels
    rooms_on_levels = rooms_on_levels + 1
    last_room_on_level = rooms_on_levels ** 2 + last_room_on_level

rooms_on_this_levels = []
for i in range(rooms_on_levels ** 2):
    rooms_on_this_levels.append(last_room_on_level - i)
rooms_on_this_levels.reverse()
part_of_level_index = 0
part_of_level = []
step = 0
for i in range(rooms_on_levels, rooms_on_levels ** 2 + rooms_on_levels, rooms_on_levels):
    if room in rooms_on_this_levels[step:i]:
        part_of_level_index = int(i / rooms_on_levels)
        part_of_level = rooms_on_this_levels[step:i]
        break
    step += rooms_on_levels

level = part_of_level_index + level - 1
position = part_of_level.index(room) + 1
print('Комната находится на этаже №:',level)
print('Позиция комнаты на этаже:',position)